y = y_label)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
sidebarLayout(
sidebarPanel = selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019)),
sidebarPanel(selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
hr()),
mainPanel(plotOutput("bar_chart"))
)
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700))
y <- subset(x, year>=2010 & year<=2019)
title <- "Species Observations Over Time"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel = selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
sidebarPanel = selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
hr(),
mainPanel(plotOutput("bar_chart"))
)
)
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700))
y <- subset(x, year>=2010 & year<=2019)
title <- "Species Observations Over Time"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700))
y <- subset(x, year>=2010 & year<=2019)
title <- "Species Observations Over Time"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700, 900))
y <- subset(x, year>=2010 & year<=2019)
title <- "Species Observations Over Time"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
runApp()
ui <- fluidPage(
selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700, 900))
y <- subset(x, year>=2010 & year<=2019)
title <- "Species Observations Over Time"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
View(ui)
ui <- fluidPage(
selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700, 900))
y <- subset(x, year>=input$from & year<=out$to)
title <- "Species Observations Over Time"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700, 900))
y <- subset(x, year>=input$from & year<=input$to)
title <- "Species Observations Over Time"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700, 900))
y <- subset(x, year>=input$from & year<=input$to)
title <- "Count of Species Observations Per Year"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
selectInput(inputId = "from",
label = "Select Year Start",
selected = 2010,
choices = 2010:2019),
selectInput(inputId = "to",
label = "Select Year End",
selected = 2019,
choices = 2010:2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- data.frame(year = c(2010:2019), freq = c(1, 2, 4, 6, 50, 200, 500, 300, 700, 900))
y <- subset(x, year>=input$from & year<=input$to)
title <- "Count of Species Observations Per Year"
x_label <- "Year"
y_label <- "Frequency"
ggplot(y, aes(x = year, y = freq))+
geom_col()+
labs(title = title,
x = x_label,
y = y_label)
})
}
shinyApp(ui = ui, server = server)
# load complete GBIF data for MetroVan
gbif <- read.csv("./datasets/gbif_complete.csv", sep = "\t", stringsAsFactors = FALSE, na.strings = c("", " "))
trimmed_gbif <- filter(gbif,
kingdom!="incertae sedis" & kingdom!="NA" & kingdom!="Archaea" & kingdom!="Viruses")
# select the most relevant columns
trimmed_gbif <- select(trimmed_gbif, c(datasetKey,kingdom, phylum, class, order,
family,genus,species,taxonRank,locality, decimalLatitude,decimalLongitude,
month, year, basisOfRecord))
# Add a column that strips the var. from any species name
trimmed_gbif <- mutate(trimmed_gbif, simplified_names = gsub(pattern = " var.*", replacement = "", x = trimmed_gbif$species))
# Drop any NAs from the species and simplified names columns
trimmed_gbif <- drop_na(trimmed_gbif, species, simplified_names)
library(shiny)
library(ggplot2)
trimmed_gbif <- filter(gbif,
kingdom!="incertae sedis" & kingdom!="NA" & kingdom!="Archaea" & kingdom!="Viruses")
# select the most relevant columns
trimmed_gbif <- select(trimmed_gbif, c(datasetKey,kingdom, phylum, class, order,
family,genus,species,taxonRank,locality, decimalLatitude,decimalLongitude,
month, year, basisOfRecord))
# Add a column that strips the var. from any species name
trimmed_gbif <- mutate(trimmed_gbif, simplified_names = gsub(pattern = " var.*", replacement = "", x = trimmed_gbif$species))
# Drop any NAs from the species and simplified names columns
trimmed_gbif <- drop_na(trimmed_gbif, species, simplified_names)
library(tidyverse)
library(tidyr)
trimmed_gbif <- filter(gbif,
kingdom!="incertae sedis" & kingdom!="NA" & kingdom!="Archaea" & kingdom!="Viruses")
# select the most relevant columns
trimmed_gbif <- select(trimmed_gbif, c(datasetKey,kingdom, phylum, class, order,
family,genus,species,taxonRank,locality, decimalLatitude,decimalLongitude,
month, year, basisOfRecord))
# Add a column that strips the var. from any species name
trimmed_gbif <- mutate(trimmed_gbif, simplified_names = gsub(pattern = " var.*", replacement = "", x = trimmed_gbif$species))
# Drop any NAs from the species and simplified names columns
trimmed_gbif <- drop_na(trimmed_gbif, species, simplified_names)
rm(gbif)
library(gridExtra)
library(grid)
min(trimmed_gbif$year)
# Drop any NAs from the species and simplified names columns
trimmed_gbif <- drop_na(trimmed_gbif, species, simplified_names, year)
min(trimmed_gbif$year)
max(trimmed_gbif$year)
knitr::opts_chunk$set(echo = TRUE)
# distribution of the  observations in plant phyla
plant_phyla_counts <- mutate(as.data.frame(sort(table(plants$phylum))),
common_name = c("Hornworts",
"Green Algae",
"Green Algae",
"Red Algae",
"Liverworts",
"Non Vascular",
"Vascular"))
plants <- subset(trimmed_gbif, trimmed_gbif$kingdom=="Plantae")
# distribution of the  observations in plant phyla
plant_phyla_counts <- mutate(as.data.frame(sort(table(plants$phylum))),
common_name = c("Hornworts",
"Green Algae",
"Green Algae",
"Red Algae",
"Liverworts",
"Non Vascular",
"Vascular"))
plant_phyla_counts <- plant_phyla_counts %>%
mutate(name = fct_reorder(common_name, Freq))
ggplot(plant_phyla_counts,
aes(x = name, y = Freq, color = name))+
geom_col(show.legend = F)+
labs(x = "Plant Phyla",
y = "Frequency",
title = "Distribution of the Plantae Phyla Observations",
subtitle = "Metro Vancouver")+
theme_dark()+
theme(plot.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_text(face = "bold"))
# plot the distribution of plant phyla excluding: tracheophya/vascular plants
ggplot(filter(plant_phyla_counts, common_name!="Vascular"),
aes(x = name, y = Freq, color = name))+
geom_col(show.legend = FALSE)+
labs(x = "Plant Phyla",
y = "Frequency",
title = "Distribution of the Plantae Phyla Excluding Vascular Plants",
subtitle = "Metro Vancouver")+
theme_dark()+
theme(plot.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_text(face = "bold"))
View(head(trimmed_gbif))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
x <- filter(trimmed_gbif, kingdom=="Animalia" & year==2017)
View(head(x))
y <- as.data.frame(table(x$phylum))
y
y <- mutate(y, name = fct_reorder(Var1, Frea))
y <- mutate(y, name = fct_reorder(Var1, frequency))
y <- mutate(y, name = fct_reorder(Var1, Freq))
y
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
server <- function(input, output){
output$bar_chart <- renderPlot({
x <- filter(trimmed_gbif, kingdom==input$kingdom & year==input$year)
y <- as.data.frame(table(x$phylum))
y <- y %>% mutate(name = fct_reorder(Var1, Freq))
title <- "Distribution of the Phylum Level Observations in a Given Year"
x_label <- "Phyla"
y_label <- "Frequency"
ggplot(y, aes(x = name, y = Freq, color = name))+
geom_col(show.legend = F)+
labs(x = x_label,
y = y_label,
title = title)+
theme_dark()+
theme(plot.title = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.text = element_text(face = "bold"))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(gridExtra)
library(grid)
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
library(shiny)
library(ggplot2)
library(tidyverse)
library(tidyr)
library(gridExtra)
library(grid)
ui <- fluidPage(
selectInput(inputId = "kingdom",
label = "Select Kingdom",
choices = trimmed_gbif$kingdom),
sliderInput(inputId = "year",
label = "Select Year",
min = min(trimmed_gbif$year),
max = max(trimmed_gbif$year),
value = 2019),
plotOutput("bar_chart"))
?tags
?titlePanel
fluidPage(
titlePanel(title = "Biodiversity Distributions", windowTitle = "abc")
)
ui <- fluidPage(
titlePanel(title = "Biodiversity Distributions", windowTitle = "abc")
)
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(title = "Biodiversity Distributions", windowTitle = "abc")
)
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(title = "Biodiversity Distributions")
)
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(title = "Biodiversity Distributions")
)
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
