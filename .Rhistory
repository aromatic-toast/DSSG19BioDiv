plot(cars)
install.packages(c("rgdal", "spdplyr", "spdplyr", "rmapshaper"))
library(rgdal)
sei <- readOGR(dsn = "../MVSEI2014"),
library(rgdal)
sei <- readOGR(dsn = "../MVSEI2014",
layer = "MVSEI2014", verbose = FALSE)
library(rgdal)
sei <- readOGR(dsn = "../MVSEI2014",
layer = "MVSEI2014")
library(rgdal)
sei <- readOGR(dsn = "/Users/raghav/DSSG19BioDiv/MVSEI2014",
layer = "MVSEI2014")
head(sei@data, 10)
library(spdplyr)
sei
sei_select <- sei %>% select(SEI_PolyNb, Comp1Lgnd)
sei_select
library(geojsonio)
sei_json <- geojson_json(sei_select)
geojson_write(sei_json, file = "/Users/raghav/DSSG19BioDiv/leaflet/SEI.geojson")
library(rgdal)
sei <- readOGR(dsn = "/Users/raghav/DSSG19BioDiv/MVSEI2014",
layer = "MVSEI2014")
sei <- spTransform(sei, CRS("+proj=longlat +datum=WGS84"))
sei_select <- sei %>% select(SEI_PolyNb, Comp1Lgnd)
sei_json <- geojson_json(sei_select)
geojson_write(sei_json, file = "/Users/raghav/DSSG19BioDiv/leaflet/SEI.geojson")
sei_json_simplified <- ms_simplify(sei_json)
library(rmapshaper)
sei_json_simplified <- ms_simplify(sei_json)
sei
sei_select <- sei %>% select(SEI_PolyNb, Comp1Lgnd_, Comp2Lgnd_, Comp3Lgnd_, QualityNo_)
sei_json <- geojson_json(sei_select)
library(rmapshaper)
sei_json_simplified <- ms_simplify(sei_json)
geojson_write(sei_json_simplified, file = "/Users/raghav/DSSG19BioDiv/leaflet/SEI.geojson")
sei_select <- sei %>% select(SEI_PolyNb, Comp1Lgnd_, Comp2Lgnd_, Comp3Lgnd_, QualityNo_, Location)
sei_json <- geojson_json(sei_select)
library(rmapshaper)
sei_json_simplified <- ms_simplify(sei_json)
geojson_write(sei_json_simplified, file = "/Users/raghav/DSSG19BioDiv/leaflet/SEI.geojson")
sei
sei
nrow(sei)-sum(is.na(sei$Comp2Lgnd))
nrow(sei)
sei
nrow(sei)-sum(is.na(sei$Comp2Lgnd))
unique(sei$Comp1Lgnd)
sei
nrow(sei)-sum(is.na(sei$Comp2Lgnd))
unique(sei$SECl_1)
lenghth(unique(sei$SECl_1))
length(unique(sei$SECl_1))
unique(sei$Comp1Lgnd)
unique(sei$SE_ME_1)
sei_select <- sei %>% select(SEI_PolyNb, Comp1Lgnd_, Comp2Lgnd_, Comp3Lgnd_, QualityNo_, Location, SE_ME_1,SECl_1)
sei_json <- geojson_json(sei_select)
library(rmapshaper)
sei_json_simplified <- ms_simplify(sei_json)
geojson_write(sei_json_simplified, file = "/Users/raghav/DSSG19BioDiv/leaflet/SEI.geojson")
sei$SECl_1
unique(sei$SECl_1)
sei_json <- topojson_json(sei_select)
library(rgdal)
sei <- readOGR(dsn = "/Users/raghav/DSSG19BioDiv/MVSEI2014",
layer = "MVSEI2014")
sei <- spTransform(sei, CRS("+proj=longlat +datum=WGS84"))
library(spdplyr)
sei_select <- sei %>% select(SEI_PolyNb, Comp1Lgnd_, Comp2Lgnd_, Comp3Lgnd_, QualityNo_, Location, SE_ME_1,SECl_1)
library(geojsonio)
library(rmapshaper)
sei_json_simplified <- ms_simplify(sei_json)
sei_json <- topojson_json(sei_select)
library(rmapshaper)
sei_json_simplified <- ms_simplify(sei_json)
sei_json <- topojson_json(sei_select)
geojson_write(sei_json_simplified, file = "/Users/raghav/DSSG19BioDiv/leaflet/SEI.topojson")
install.packages('tidyverse')
unq_rows = as.numeric(rownames(unique(total[c("species","year","decimalLatitude","decimalLongitude")])))
library(tidyverse)
## ACTUAL USAGE 2 ##
total = read.csv("GBif_Original.csv", stringsAsFactors = FALSE, row.names=NULL)
unq_rows = as.numeric(rownames(unique(total[c("species","year","decimalLatitude","decimalLongitude")])))
total_unq = total[unq_rows,]
total$coor = paste0(total$decimalLatitude, total$decimalLongitude)
total_unq$coor = paste0(total_unq$decimalLatitude, total_unq$decimalLongitude)
month_count = total %>% group_by(species, year, coor) %>% summarise(paste(unique(month), collapse = ", "))
colnames(month_count)[ncol(month_count)] = "months"
total_unq = total_unq[order(total_unq$species, total_unq$year, total_unq$coor),]
month_count = month_count[order(month_count$species, month_count$year, month_count$coor),]
#total_unq$months = month_count$`paste(unique(month), collapse = ", ")`
#sep_months = sapply(total_unq$months, strsplit, ", ")
sep_months = month_count$months
total_unq$Winter = 0
total_unq$Spring = 0
total_unq$Summer = 0
total_unq$Fall = 0
for (row in 1:nrow(total_unq)) {
if (any(c(1,2,12) %in% sep_months[row][[1]][1])) {total_unq$Winter[row] = 1}
if (any(c(3:5) %in% sep_months[row][[1]][1])) {total_unq$Spring[row] = 1}
if (any(c(6:8) %in% sep_months[row][[1]][1])) {total_unq$Summer[row] = 1}
if (any(c(9:11) %in% sep_months[row][[1]][1])) {total_unq$Fall[row] = 1}
#if (row %% 15000 == 0) {print(paste("Loop is ", round(row/nrow(total_unq)*100), "% done", sep = ""))}
}
write.csv(total_unq, "GBif_R.csv")
library(tidyverse)
total = read.csv("GBif_Original.csv", stringsAsFactors = FALSE, row.names=NULL)
unq_rows = as.numeric(rownames(unique(total[c("species","year","decimalLatitude","decimalLongitude")])))
total = read.csv("GBif_Original.csv", stringsAsFactors = FALSE, row.names=NULL)
file.path(R.home("bin"), "R")
total = read.csv("/Users/raghav/Desktop/DSSG19BioDiv/
GBif_Original.csv", stringsAsFactors = FALSE, row.names=NULL)
total = read.csv("/Users/raghav/Desktop/DSSG19BioDiv/
GBif_Original.csv", stringsAsFactors = FALSE, row.names=NULL)
library(tidyverse)
total = read.csv("/Users/raghav/Desktop/DSSG19BioDiv/
GBif_Original.csv", stringsAsFactors = FALSE, row.names=NULL)
df = read.csv("./GBif_recency.csv", stringsAsFactors = F)
colnames(df)[colnames(df)=="decimalLatitude"] <- "Latitude"
colnames(df)[colnames(df)=="decimalLongitude"] <- "Longitude"
saveRDS(df, "./GBif_recency.rds")
library(shiny)
library(leaflet)
library(dplyr)
df = read.csv("./GBif_recency.csv", stringsAsFactors = F)
colnames(df)[colnames(df)=="decimalLatitude"] <- "Latitude"
colnames(df)[colnames(df)=="decimalLongitude"] <- "Longitude"
saveRDS(df, "./GBif_recency.rds")
df <- readRDS("./GBif_recency.rds")
df
library(shiny)
library(leaflet)
library(dplyr)
df <- readRDS("./GBif_recency.rds")
df
df.head()
head(df,10)
df
class(df)
library(shiny)
library(leaflet)
library(dplyr)
df <- readRDS("./GBif_recency.rds")
df
df = read.csv("./GBif_recency.csv", stringsAsFactors = F)
colnames(df)[colnames(df)=="decimalLatitude"] <- "Latitude"
colnames(df)[colnames(df)=="decimalLongitude"] <- "Longitude"
saveRDS(df, "./GBif_recency.rds")
df
df = read.csv("./GBif_recency.csv", stringsAsFactors = F)
getwd()
getcw()
getwd()
setwd("/Users/raghav/Desktop/DSSG19BioDiv/")
library(rgdal)
library(dplyr)
library(rgeos)
library(sp)
library(GISTools)
gdat = read.csv("gbif_summary_pre.csv") # This is the uncollapsed dataset (year information included)
if (colnames(gdat)[1] == "X") {gdat = gdat[,2:ncol(gdat)]}
gdatsp = gdat
bound = readOGR(dsn = "/Users/raghav/Desktop/DSSG19BioDiv/AdminBoundaries", layer = "AdminBoundaries")
bound@data$SHAPE_STAr = round(bound@data$SHAPE_STAr) # This rounds the areas to the nearest metre squared to avoid problems with too many decimal places when writing the file
coordinates(gdatsp) = c("decimalLongitude", "decimalLatitude")
proj4string(gdatsp) = CRS("+proj=longlat +datum=WGS84")
gdatsp = spTransform(gdatsp, proj4string(bound))
# This code incorporates the UBC polygon
#ubc.coord = matrix(c(-123.26494, 49.26512, -123.26308, 49.25894, -123.25409, 49.25118, -123.22587, 49.23889, -123.19758, 49.23532,-123.1979, 49.24501, -123.2054, 49.24898,-123.20218, 49.25358,-123.20382, 49.25832,-123.21564, 49.25873,-123.21564, 49.26374,-123.22793, 49.26326,-123.22896, 49.26656,-123.22264, 49.26889,-123.2269, 49.27322,-123.22662, 49.27947,-123.24743, 49.2805,-123.26267, 49.27047,-123.26494, 49.26512), ncol = 2, byrow = TRUE)
#ubc.coord = matrix(c(-123.223952, 49.278195, -123.224796, 49.272730, -123.222808, 49.270882, -123.222808, 49.268641, -123.219675, 49.268759, -123.219495, 49.267265, -123.215277, 49.267382, -123.215398, 49.258417, -123.203288, 49.258140, -123.202864, 49.256686, -123.196597, 49.256646, -123.196718, 49.250197, -123.204491, 49.249214, -123.198949, 49.246303, -123.196780, 49.246224, -123.196898, 49.238515, -123.198525, 49.238475, -123.198586, 49.236626, -123.196899, 49.236587, -123.196899, 49.234935, -123.206900, 49.237532, -123.209431, 49.235565, -123.219976, 49.239577, -123.221662, 49.236902, -123.248681, 49.249010, -123.250528, 49.250441, -123.252837, 49.251495, -123.253761, 49.252851, -123.254570, 49.254809, -123.264734, 49.265203, -123.265081, 49.266710, -123.264273, 49.267162, -123.262659, 49.270779, -123.260463, 49.271831, -123.253076, 49.275524, -123.252037, 49.276804, -123.247420, 49.279517, -123.236335, 49.279442, -123.234257, 49.279518, -123.227567, 49.278763, -123.225500, 49.278093), ncol = 2, byrow = TRUE)
# Split up the UEL/EAA polygon(s)
line = SpatialLines(list(Lines(list(Line(cbind(c(479500,479500,484000),c(5456000,5458500,5458500)))),ID="line")), proj4string = CRS(proj4string(bound)))
line2 = SpatialLines(list(Lines(list(Line(cbind(c(481500,481500),c(5470000,5485000)))),ID="line")), proj4string = CRS(proj4string(bound)))
lpi1 = gIntersection(bound[26,],line)
blpi1 = gBuffer(lpi1, width=.0000001)
line@proj4string
bound@proj4string
library(rgdal)
library(rgeos)
library(dplyr)
library(sp)
library(GISTools)
gdat = read.csv("gbif_summary_pre.csv") # This is the uncollapsed dataset (year information included)
if (colnames(gdat)[1] == "X") {gdat = gdat[,2:ncol(gdat)]}
gdatsp = gdat
bound = readOGR(dsn = "/Users/raghav/Desktop/DSSG19BioDiv/AdminBoundaries", layer = "AdminBoundaries")
bound@data$SHAPE_STAr = round(bound@data$SHAPE_STAr) # This rounds the areas to the nearest metre squared to avoid problems with too many decimal places when writing the file
coordinates(gdatsp) = c("decimalLongitude", "decimalLatitude")
proj4string(gdatsp) = CRS("+proj=longlat +datum=WGS84")
gdatsp = spTransform(gdatsp, proj4string(bound))
# This code incorporates the UBC polygon
#ubc.coord = matrix(c(-123.26494, 49.26512, -123.26308, 49.25894, -123.25409, 49.25118, -123.22587, 49.23889, -123.19758, 49.23532,-123.1979, 49.24501, -123.2054, 49.24898,-123.20218, 49.25358,-123.20382, 49.25832,-123.21564, 49.25873,-123.21564, 49.26374,-123.22793, 49.26326,-123.22896, 49.26656,-123.22264, 49.26889,-123.2269, 49.27322,-123.22662, 49.27947,-123.24743, 49.2805,-123.26267, 49.27047,-123.26494, 49.26512), ncol = 2, byrow = TRUE)
#ubc.coord = matrix(c(-123.223952, 49.278195, -123.224796, 49.272730, -123.222808, 49.270882, -123.222808, 49.268641, -123.219675, 49.268759, -123.219495, 49.267265, -123.215277, 49.267382, -123.215398, 49.258417, -123.203288, 49.258140, -123.202864, 49.256686, -123.196597, 49.256646, -123.196718, 49.250197, -123.204491, 49.249214, -123.198949, 49.246303, -123.196780, 49.246224, -123.196898, 49.238515, -123.198525, 49.238475, -123.198586, 49.236626, -123.196899, 49.236587, -123.196899, 49.234935, -123.206900, 49.237532, -123.209431, 49.235565, -123.219976, 49.239577, -123.221662, 49.236902, -123.248681, 49.249010, -123.250528, 49.250441, -123.252837, 49.251495, -123.253761, 49.252851, -123.254570, 49.254809, -123.264734, 49.265203, -123.265081, 49.266710, -123.264273, 49.267162, -123.262659, 49.270779, -123.260463, 49.271831, -123.253076, 49.275524, -123.252037, 49.276804, -123.247420, 49.279517, -123.236335, 49.279442, -123.234257, 49.279518, -123.227567, 49.278763, -123.225500, 49.278093), ncol = 2, byrow = TRUE)
# Split up the UEL/EAA polygon(s)
line = SpatialLines(list(Lines(list(Line(cbind(c(479500,479500,484000),c(5456000,5458500,5458500)))),ID="line")), proj4string = CRS(proj4string(bound)))
line2 = SpatialLines(list(Lines(list(Line(cbind(c(481500,481500),c(5470000,5485000)))),ID="line")), proj4string = CRS(proj4string(bound)))
lpi1 = gIntersection(bound[26,],line)
blpi1 = gBuffer(lpi1, width=.0000001)
