---
title: "Taxonomy Explorer"
author: "Gabriel Smith"
date: "June 7, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

# INTERACTIVE EXPLORERS

This code establishes two functions. 
create.phylograph produces a phylograph (or similar alternative) from an inputted group (at any level; e.g., "Animalia", "Reptilia") by tracing its descendants to a given level of precision (e.g., "family", "genus").
taxonomy.viewer allows the user to explore the tree of life starting at the kingdom level by entering the group they would like to examine and providing a list of constiuent levels within that group. This can be used to identify the taxon of interest to feed into the create.phylograph function

```{r}
dict = data.frame(c(4,5,6,7,8,9),c("kingdom","phylum","class","order","family","genus"))
create.phylograph = function() {
  ty = readline(prompt="What type of chart would you like? Enter \"p\" for phylograph, \"c\" for 
    cladogram, \"f\" for fan, \"u\" for unrooted, or \"r\" for radial.")
  focus = readline(prompt="What kind of organism would you like to focus on? (case-sensitive)")
  high = 4
  if (focus %in% unique(data$kingdom)) {df = subset(data, kingdom==focus)}
  else if (focus %in% unique(data$phylum)) {
    df = subset(data, phylum==focus)
    high = 5}
  else if (focus %in% unique(data$class)) {
    df = subset(data, class==focus)
    high = 6}
  else if (focus %in% unique(data$order)) {
    df = subset(data, order==focus)
    high = 7}
  else if (focus %in% unique(data$family)) {
    df = subset(data, family==focus)
    high = 8}
  depth = tolower(readline(prompt="What level of specificity would you like to see the data of?"))
  depth = dict[which(dict[,2]==depth),1]
  
  newick = df2newick(df[,high:depth], TRUE)
  tr = read.tree(text = newick)
  plot(tr, type = ty, show.node.label = TRUE, node.depth = 2, direction = "downwards", srt = 45)
}

taxonomy.viewer = function(df) {
  kingdom = readline(prompt = as.character(paste("Select a kingdom to view or enter \"exit\" to leave. \n", cat(unique(df$kingdom), sep = "\n"))))
  if (tolower(kingdom) != "exit") {
    phylum = readline(prompt = as.character(paste("Select a phylum to view or enter \"exit\" to leave. \n", cat(unique(df$phylum[df$kingdom==kingdom]), sep = "\n"))))
    if (tolower(phylum) != "exit") {
      class = readline(prompt = as.character(paste("Select a class to view or enter \"exit\" to leave. \n", cat(unique(df$class[df$phylum==phylum]), sep = "\n"))))
      if (tolower(class) != "exit") {
        order = readline(prompt = as.character(paste("Select an order to view or enter \"exit\" to leave. \n", cat(unique(df$order[df$class==class]), sep = "\n"))))
        if (tolower(order) != "exit") {
          family = readline(prompt = as.character(paste("Select a family to view or enter \"exit\" to leave. \n", cat(unique(df$family[df$order==order]), sep = "\n"))))
          if (tolower(family) != "exit") {
            genus = readline(prompt = as.character(paste("Select a genus to view or enter \"exit\" to leave. \n", cat(unique(df$genus[df$family==family]), sep = "\n"))))
            if (tolower(genus) != "exit") {
              cat(unique(df$species[df$genus==genus]), sep = "\n")
            }
          }
        }
      }
    }
  }
  noquote("Have a good day!")
  df = NULL
}
```

# IDENTIFYING GAPS

```{r}
a = c("Reptiles", "Birds", "Mammals", "Amphibians", "Ray-Finned Fish", "Lampreys", "Filter-Feeders", "Sharks/Skates", "Ratfish")
b = NULL
c = NULL
d = NULL
for (cl in unique(data$class[which(data$phylum=="Chordata")])) {
  if (!is.na(cl)) {
    b = c(b, cl)
    c = c(c, length(unique(data$species[which(data$class==cl)])))
    d = c(d, length(data$species[which(data$class==cl)]))
    }
}
sum = as.data.frame(cbind(a,b,c,d))[order(d, decreasing = TRUE),]
colnames(sum) = c("Class","Scientific Name","Unique Species","Observations")
sum
```