View(head(summary_df))
write_csv(summary_df, "./gbif_summary_pre.csv")
runApp()
head(sort(unique(df2$species)))
runApp()
length(unique(df2$species)))
length(unique(df2$species))
x = df2 %>%
filter(species %in% input$species, year>=2010, year<=2018) %>%
group_by(species, year) %>%
tally() %>%
drop_na() %>%
add_zeros()
x = df2 %>%
filter(species=="Selasphorus rufus",year>=2010, year<=2018) %>%
group_by(species, year) %>%
tally() %>%
drop_na() %>%
add_zeros()
x$year
which(yearly_obs$year %in% x$year)
y <- yearly_obs[which(yearly_obs$year %in% x$year),]
y$year
head(x)
head(y)
class(x$n)
class(y$n)
x <- x %>% mutate(normalized = x$n/y$n)
head(x)
head(y)
runApp()
runApp()
install.packages("rgdal","rgeos", "sp" ,"GISTools")
install.packages(c("rgdal","rgeos", "sp" ,"GISTools"))
getwd()
ls
library(rgdal)
library(dplyr)
library(rgeos)
library(sp)
library(GISTools)
#setwd("C:/Users/Gabe/Desktop/DSSG19BioDiv")
#gdat = read.csv("GBif June27.csv") # This is the collapsed dataset (no years, only recency)
gdat = read.csv("gbif_summary_pre.csv") # This is the uncollapsed dataset (year information included)
if (colnames(gdat)[1] == "X") {gdat = gdat[,2:ncol(gdat)]}
gdatsp = gdat
bound = readOGR(dsn = "~/Downloads/AdminBoundaries", layer = "AdminBoundaries")
bound@data$SHAPE_STAr = round(bound@data$SHAPE_STAr) # This rounds the areas to the nearest metre squared to avoid problems with too many decimal places when writing the file
coordinates(gdatsp) = c("decimalLongitude", "decimalLatitude")
proj4string(gdatsp) = CRS("+proj=longlat +datum=WGS84")
gdatsp = spTransform(gdatsp, proj4string(bound))
# This code incorporates the UBC polygon
#ubc.coord = matrix(c(-123.26494, 49.26512, -123.26308, 49.25894, -123.25409, 49.25118, -123.22587, 49.23889, -123.19758, 49.23532,-123.1979, 49.24501, -123.2054, 49.24898,-123.20218, 49.25358,-123.20382, 49.25832,-123.21564, 49.25873,-123.21564, 49.26374,-123.22793, 49.26326,-123.22896, 49.26656,-123.22264, 49.26889,-123.2269, 49.27322,-123.22662, 49.27947,-123.24743, 49.2805,-123.26267, 49.27047,-123.26494, 49.26512), ncol = 2, byrow = TRUE)
#ubc.coord = matrix(c(-123.223952, 49.278195, -123.224796, 49.272730, -123.222808, 49.270882, -123.222808, 49.268641, -123.219675, 49.268759, -123.219495, 49.267265, -123.215277, 49.267382, -123.215398, 49.258417, -123.203288, 49.258140, -123.202864, 49.256686, -123.196597, 49.256646, -123.196718, 49.250197, -123.204491, 49.249214, -123.198949, 49.246303, -123.196780, 49.246224, -123.196898, 49.238515, -123.198525, 49.238475, -123.198586, 49.236626, -123.196899, 49.236587, -123.196899, 49.234935, -123.206900, 49.237532, -123.209431, 49.235565, -123.219976, 49.239577, -123.221662, 49.236902, -123.248681, 49.249010, -123.250528, 49.250441, -123.252837, 49.251495, -123.253761, 49.252851, -123.254570, 49.254809, -123.264734, 49.265203, -123.265081, 49.266710, -123.264273, 49.267162, -123.262659, 49.270779, -123.260463, 49.271831, -123.253076, 49.275524, -123.252037, 49.276804, -123.247420, 49.279517, -123.236335, 49.279442, -123.234257, 49.279518, -123.227567, 49.278763, -123.225500, 49.278093), ncol = 2, byrow = TRUE)
# Split up the UEL/EAA polygon(s)
line = SpatialLines(list(Lines(list(Line(cbind(c(479500,479500,484000),c(5456000,5458500,5458500)))),ID="line")), proj4string = CRS(proj4string(bound)))
line2 = SpatialLines(list(Lines(list(Line(cbind(c(481500,481500),c(5470000,5485000)))),ID="line")), proj4string = CRS(proj4string(bound)))
lpi1 = gIntersection(bound[26,],line)
blpi1 = gBuffer(lpi1, width=.0000001)
dpi1 = gDifference(bound[26,], blpi1)
runApp()
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(yearly_obs)
runApp()
sort(c(1,5, 7))
order(c(1,5,2,0))
runApp()
colnames(yearly_obs)
ggplot(yearly_obs, aes(x = year, y = n))+
geom_col()
yearly_obs %>% filter(year>=2000, year<=2018) %>%
ggplot(yearly_obs, aes(x = year, y = n))+
geom_col()
yearly_obs %>% filter(year>=2000, year<=2018) %>%
ggplot(aes(x = year, y = n))+
geom_col()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
c <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, c)
print(gbif_count)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
# the plot
ggplot(b, aes(x = Var1, y = normalized, group = species))+
geom_line(aes(color=species))+
geom_point(aes(color = species))+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))
View(b)
a <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
c <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, c)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
# the plot
ggplot(b, aes(x = Var1, y = normalized))+
geom_line(aes(color=species))+
geom_point(aes(color = species))+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))
a <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
c <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, c)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
# the plot
ggplot(b, aes(x = Var1, y = normalized))+
geom_line()+
geom_point()+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))
a <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
c <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, c)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
# the plot
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# read in the specific species info data frame
species_info <- read.csv("Taxonomy_Freq", stringsAsFactors = F, na.strings = c("", " "))
getwd()
# read in the specific species info data frame
species_info <- read.csv("Taxonomy_Freq", stringsAsFactors = F, na.strings = c("", " "))
# read in the specific species info data frame
species_info <- read.csv("Taxonomy_Freq", stringsAsFactors = F, na.strings = c("", " "))
# read in the specific species info data frame
species_info <- read.csv("Taxonomy_Freq.csv", stringsAsFactors = F, na.strings = c("", " "))
View(head(species_info))
unique(species_info$redList)
# prepare the species info dataframe to contain custom tags for shiny app plotting
library(tidyverse)
# rename the redList column to IUCN_redList
species_info %>% rename(IUCN_redList = redList)
# rename the redList column to IUCN_redList
species_info <- species_info %>% rename(IUCN_redList = redList)
View(head(species_info))
table(species_info$Endemic)
unique(species_info$BC.List)
# read in the full BC rainbow list dataframe
rainbow_list <- read.csv("~/Desktop/datasets/bc_rainbow_list.tsv",
sep = "\t",
stringsAsFactors = F,
na.strings = c("", " "))
View(head(rainbow_list))
unique(rainbow_list$BC.List)
nrow(filter(rainbow_list, BC.List=="Extinct"))
unique(rainbow_list$Origin)
nrow(rainbow_list)
unique(rainbow_list$COSEWIC)
unique(rainbow_list$Prov.Wildlife.Act)
unique(rainbow_list$SARA)
unique(species_info$IUCN_redList)
nrow(filter(species_info, IUCN_redList=="Critically Endangered"))
nrow(filter(species_info, IUCN_redList=="Endangered"))
nrow(filter(species_info, IUCN_redList=="Vulnerable"))
View(head(rainbow_list))
# read in IUCN red list
IUCN <- read.csv("~/Desktop/datasets/IUCN_redlist.csv",
stringsAsFactors = F,
na.strings = c("", " "))
Vie(head(IUCN))
View(head(IUCN))
unique(rainbow_list$General.Status.Canada)
nrow(filer(rainbow_list, General.Status.Canada==".2 - Extinct (2005)"))
nrow(filter(rainbow_list, General.Status.Canada==".2 - Extinct (2005)"))
# add a IUCN red list binary column
species_info <- species_info %>% mutate(IUCN_binary = IUCN_redList)
View(head(species_info))
table(rainbow_list$SARA)
IUCN_binary <- c()
for (i in species_info$IUCN_binary){
if(is.na(i)){
IUCN_binary <- c(IUCN_binary, 0)
}else {
IUCN_binary <- c(IUCN_binary, 1)
}
}
View(IUCN_binary)
nrow(species_info)
length(IUCN_binary)
sum(IUCN_binary)
table(species_info$IUCN_redList)
7+9+39+24
IUCN_redList_binary <- c()
for (i in species_info$IUCN_binary){
if(is.na(i)){
IUCN_redList_binary <- c(IUCN_redList_binary, 0)
}else {
IUCN_redList_binary <- c(IUCN_redList_binary, 1)
}
}
View(IUCN_redList_binary)
# add the binary vector to the species_info dataframe
species_info <- species_info %>% mutate(IUCN_binary = IUCN_redList_binary)
View(head(species_info))
species_info$IUCN_redList_binary <- IUCN_redList_binary
View(head(species_info))
# read in the specific species info data frame
species_info <- read.csv("Taxonomy_Freq.csv", stringsAsFactors = F, na.strings = c("", " "))
View(head(species_info))
species_info <- species_info %>% rename(IUCN_redList = redList)
IUCN_binary <- c()
for (i in species_info$IUCN_binary){
if(is.na(i)){
IUCN_redList_binary <- c(IUCN_redList_binary, 0)
}else {
IUCN_redList_binary <- c(IUCN_redList_binary, 1)
}
}
View(IUCN_redList_binary)
# add the binary vector to the species_info dataframe
species_info$IUCN_binary <- IUCN_redList_binary
View(head(species_info))
unique(species_info$BC.List)
# create a binary vector for BC red listed species
# 1 = entry is a string "red" , 0 = entry is anything that is not string "red"
bc_red_binary <- c()
for (i in species_info$BC.List){
if(i == "red"){
bc_red_binary <- c(bc_red_binary, 1)
}else {
bc_red_binary <- c(bc_red_binary, 0)
}
}
# add the bc_red list binary vector to the species_info dataframe
species_info$bc_red_binary <- bc_red_binary
sum(species_info$bc_red_binary)
nrow(filter(species_info, BC.List=="red"))
table(species_info$BC.List)
bc_red_binary <- c()
for (i in species_info$BC.List){
if(i == "Red"){
bc_red_binary <- c(bc_red_binary, 1)
}else {
bc_red_binary <- c(bc_red_binary, 0)
}
}
sum(bc_red_binary)
# add the bc_red list binary vector to the species_info dataframe
species_info$bc_red_binary <- bc_red_binary
View(head(species_info))
View(filter(species_info, bc_red_binary ==1))
bc_blue_binary <- c()
for (i in species_info$BC.List){
if(i == "Blue"){
bc_blue_binary <- c(bc_blue_binary, 1)
}else {
bc_blue_binary <- c(bc_blue_binary, 0)
}
}
# add the bc_blue list binary vector to the species_info dataframe
species_info$bc_blue_binary <- bc_blue_binary
View(head(species_info))
sum(species_info$bc_blue_binary)
table(species_info$BC.List)
View(filter(species_info, bc_blue_binary == 1))
table(species_info$Endemic)
unique(species_info$Endemic)
unique(rainbow_list$Endemic)
bc_endemic_binary <- c()
for (i in species_info$Endemic){
if(i == "Y"){
bc_endemic_binary <- c(bc_endemic_binary, 1)
}else {
bc_endemic_binary <- c(bc_endemic_binary, 0)
}
}
# add the bc_blue list binary vector to the species_info dataframe
species_info$bc_endemic_binary <- bc_endemic_binary
sum(species_info$bc_endemic_binary)
View(filter(species_info, bc_endemic_binary == 1))
length(grep(pattern = "hummingbird", species_info$common))
class(grep(pattern = "hummingbird", species_info$common))
grep(pattern = "hummingbird", species_info$common)
species_info[grep(pattern = "hummingbird", species_info$common),]
View(species_info[grep(pattern = "hummingbird", species_info$common),])
species_info[grep(pattern = "rufus", species_info$simplified_names),]
View(species_info[grep(pattern = "rufus", species_info$simplified_names),])
View(species_info[grep(pattern = "Hummingbird", species_info$common),])
# create a pollinators dataframe
pollinators <- species_info %>%
filter(genus=="Apis" |
genus=="Bombus" |
order=="Lepidoptera" |
family=="Masarinae" |
family=="Formicidae" |
family=="Bombyliidae" |
family=="Syrphidae" |
family=="Buprestidae" |
family=="Cantharidae" |
family=="Carambycidae" |
family=="Cleridae" |
family=="Dermestidae" |
family=="Lycidae" |
family=="Melyridae" |
family=="Mordellidae" |
family=="Nitidulidae" |
family=="Scarabeidae" |
simplified_names == "Archilochus alexandri" |
simplified_names == "Calypte anna" |
simplified_names == "Calypte costae" |
simplified_names == "Selasphorus rufus" |
simplified_names == "Selasphorus sasin" |
simplified_names == "Stellula calliope")
View(head(species_info))
grep("var", species_info$species)
species_info <- rename(redList = IUCN_redList)
species_info <- species_info %>% rename(redList = IUCN_redList)
View(head(species_info))
species_info <- species_info %>% rename(scientific_name = Scientific.Name)
View(head(species_info))
species_info <- species_info %>% rename(bc_list_status = Bc.List)
species_info <- species_info %>% rename(bc_list_status = BC.List)
species_info <- species_info %>% rename(habitat_subtype = Habitat.Subtype)
species_info <- species_info %>% rename(regional_dist = Regional.Dist)
species_info <- species_info %>% rename(breeding_bird = Breeding.Bird)
View(head(species_info))
getwd()
library(shiny)
runApp()
# Read in the data
df2 <- read.csv("gbif_summary.csv", stringsAsFactors = F)
View(filter(df2, municipality ==27))
View(filter(filter(df2, municipality ==27), species=="Phormia regina"))
View(head(species_info))
"Stellula calliope" %in% pollinators$simplified_names
pollinator <- c()
for (i in species_info$simplified_names){
if(i %in% pollinators$simplified_names){
pollinator <- c(pollinator, 1)
}else {
pollinator <- c(pollinator, 0)
}
}
# add the pollinator binary vector to the species_info dataframe
species_info$pollinator <- pollinator
View(filter(species_info, pollinator ==1))
unique(species_info$family)
unique(species_info$phylum)
unique(select(filter(species_info, pollinator ==1), phylum))
unique(select(filter(species_info, pollinator ==1), class))
View(head(species_info))
# rename the pollinator column to pollinator_binary
species_info <- rename(pollinator_binary = pollinator)
# rename the pollinator column to pollinator_binary
species_info <- species_info %>% rename(pollinator_binary = pollinator)
View(head(species_info))
write.csv(species_info, file = "Taxonomy_Freq.csv")
rm(species_info)
m <- read.csv("Taxonomy_Freq.csv", stringsAsFactors = F, na.strings = c("", " "))
View(head(m))
rm(m)
git status
runApp()
runApp()
library(shiny)
runApp()
a <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
c <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, c)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
# the plot
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))
b
ggplot(b, aes(x = Var1, y = Freq, group = 1))+
geom_line()+
geom_point()+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))
ggplot(b, aes(x = Var1, y = Freq, group = 1))+
geom_line()+
geom_point()+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))+
expand_limits(x = 0)
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))+
expand_limits(x = 0)
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()+
labs(title = "Reported Species Occurrence Over Time",
x = "Year",
y = "Reported Sightings")+
theme(plot.title = element_text(face = "bold", size = 20),
axis.title.x = element_text(face = "bold", size = 14),
axis.title.y = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 14))+
expand_limits(y = 0)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(filter(df2, species == "Phormia regina"))
runApp()
runApp()
runApp()
runApp()
