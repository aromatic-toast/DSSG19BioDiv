y
x <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
y <- as.data.frame(table(x$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
print(gbif_count)
}
y <- cbind(y, gbif_count)
y <- mutate(y, normalized = Freq/gbif_count)
a <- filter(df2, species=="Corvus caurinus" & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count2 <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count2 <- c(gbif_count2, d)
print(gbif_count2)
}
b <- cbind(b, gbif_count2)
b <- mutate(b, normalized = Freq/gbif_count2)
colnames(b) <- c("Var1", "Freq", "gbif_count", "normalized")
y
b
c <- rbind(y, b)
c
length(seq(from = 2010, to = 2018, by = 1))
species$c <- c(rep("Selasphorus rufus", length(seq(from = 2010, to = 2018, by = 1)),
rep("Corvus caurinus", length(seq(from = 2010, to = 2018, by = 1)))))
c$species <- c(rep("Selasphorus rufus", length(seq(from = 2010, to = 2018, by = 1)),
rep("Corvus caurinus", length(seq(from = 2010, to = 2018, by = 1)))))
c$species <- c(rep("Selasphorus rufus", length(seq(from = 2010, to = 2018, by = 1))),
rep("Corvus caurinus", length(seq(from = 2010, to = 2018, by = 1))))
c
ggplot(c, aes(x = Var1, y = normalized, group = species))+
geom_line()+
geom_point()
ggplot(c, aes(x = Var1, y = normalized, group = species))+
geom_line(aes(color=species))+
geom_point(aes(color = species))
unique(df2$kingdom)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputID = "kingdom",
label = "Select a Kingdom",
choices = unique(df2$kingdom)),
selectInput(inputID= "sub-group",
label = "Select a Sub-group",
choices = select(filter(df2, kingdom==input$kingdom), species))),
mainPanel(
plotOutput("chart"),
leafletOutput("mymap",height = 1000))
)
)
#leafletOutput("mymap",height = 1000)
View(head(filter(df2, species==c("Selasphorus rufus", "Abeliophyllum distichum"))))
View((filter(df2, species==c("Selasphorus rufus", "Abeliophyllum distichum"))))
runApp()
runApp()
runApp()
View(filter(df2, kingdom=="Animalia" & species=="Selasphorus rufus"))
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "kingdom",
label = "Select a Kingdom",
choices = unique(df2$kingdom),
multiple = T),
selectInput(inputId= "species",
label = "Select a Species",
choices = select(filter(df2, kingdom==input$kingdom), species))),
mainPanel(
plotOutput("chart"),
leafletOutput("mymap",height = 1000))
)
)
runApp()
runApp()
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput(inputId = "kingdom",
label = "Select a Species",
choices = unique(df2$species),
multiple = T)),
mainPanel(
plotOutput("chart"),
leafletOutput("mymap",height = 1000))
)
)
#leafletOutput("mymap",height = 1000)
#selectInput(inputId= "species",
#label = "Select a Species",
#choices = select(filter(df2, kingdom==input$kingdom), species))
server <- function(input,output, session){
output$chart <- renderPlot({
x <- filter(df2, species==input$species)
y <- as.data.frame(table(x$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
print(gbif_count)
}
y <- cbind(y, gbif_count)
y <- mutate(y, normalized = Freq/gbif_count)
ggplot(c, aes(x = Var1, y = normalized, group = 1))+
geom_line(aes(color=species))+
geom_point(aes(color = species))
})
data <- reactive({
x <- df
})
output$mymap <- renderLeaflet({
df <- data()
m <- leaflet(data = df) %>%
addTiles() %>%
addMarkers(lng = ~Longitude,
lat = ~Latitude,
popup = paste("Species", df$species, "<br>",
"Common Name:", df$common),
clusterOptions = markerClusterOptions())
m
})
}
shinyApp(ui = ui, server = server)
shinyApp()
runApp()
ui <- fluidPage(
titlePanel(title = "Species Observations Over Time"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "kingdom",
label = "Select a Species",
choices = unique(df2$species),
multiple = T)),
mainPanel(
plotOutput("chart")
)
)
)
#
#leafletOutput("mymap",height = 1000)
#selectInput(inputId= "species",
#label = "Select a Species",
#choices = select(filter(df2, kingdom==input$kingdom), species))
server <- function(input,output, session){
output$chart <- renderPlot({
x <- filter(df2, species==input$species)
y <- as.data.frame(table(x$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
print(gbif_count)
}
y <- cbind(y, gbif_count)
y <- mutate(y, normalized = Freq/gbif_count)
ggplot(c, aes(x = Var1, y = normalized, group = 1))+
geom_line(aes(color=species))+
geom_point(aes(color = species))
})
data <- reactive({
x <- df
})
output$mymap <- renderLeaflet({
df <- data()
m <- leaflet(data = df) %>%
addTiles() %>%
addMarkers(lng = ~Longitude,
lat = ~Latitude,
popup = paste("Species", df$species, "<br>",
"Common Name:", df$common),
clusterOptions = markerClusterOptions())
m
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
b
runApp()
a <- filter(df2, species=="Selasphorus rufus")
a
View(a)
b <- as.data.frame(table(a$year))
View(b)
runApp()
b
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
}
b <- cbind(b, gbif_count)
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
}
b <- cbind(b, gbif_count)
length(gbif_count)
nrow(b)
a <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
nrow(a)
b <- as.data.frame(table(a$year))
b
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
}
b <- cbind(b, gbif_count)
b
b <- mutate(b, normalized = Freq/gbif_count)
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()
runApp()
library(shiny)
colnames(df2)[11:17]
colnames(df2)
colnames(df2)[2:7]
View(df_sub
View(df_sub)
colnames(df2)[2:7]
server <- function(input,output, session){
output$chart <- renderPlot({
a <- filter(df2, species==input$species & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()
})
data <- reactive({
x <- df
})
output$mymap <- renderLeaflet({
df <- data()
m <- leaflet(data = df) %>%
addTiles() %>%
addMarkers(lng = ~Longitude,
lat = ~Latitude,
popup = paste("Species", df$species, "<br>",
"Common Name:", df$common),
clusterOptions = markerClusterOptions())
m
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel(title = "Species Observations Over Time"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "species",
label = "Select a Species",
choices = unique(df2$species),
multiple = F)),
mainPanel(
plotOutput("chart"),
leafletOutput("mymap",height = 1000)
)
)
)
server <- function(input,output, session){
output$chart <- renderPlot({
a <- filter(df2, species==input$species & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()
})
data <- reactive({
x <- df
})
output$mymap <- renderLeaflet({
df <- data()
m <- leaflet(data = df) %>%
addTiles() %>%
addMarkers(lng = ~Longitude,
lat = ~Latitude,
popup = paste("Species", df$species, "<br>",
"Common Name:", df$common),
clusterOptions = markerClusterOptions())
m
})
}
shinyApp(ui = ui, server=server)
library(shiny)
library(leaflet)
library(tidyverse)
library(dplyr)
ui <- fluidPage(
titlePanel(title = "Species Observations Over Time"),
sidebarLayout(
sidebarPanel(
selectInput(inputId = "species",
label = "Select a Species",
choices = unique(df2$species),
multiple = F)),
mainPanel(
plotOutput("chart"),
leafletOutput("mymap",height = 1000)
)
)
)
server <- function(input,output, session){
output$chart <- renderPlot({
a <- filter(df2, species==input$species & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
}
b <- cbind(b, gbif_count)
b <- mutate(b, normalized = Freq/gbif_count)
ggplot(b, aes(x = Var1, y = normalized, group = 1))+
geom_line()+
geom_point()
})
data <- reactive({
x <- df
})
output$mymap <- renderLeaflet({
df <- data()
m <- leaflet(data = df) %>%
addTiles() %>%
addMarkers(lng = ~Longitude,
lat = ~Latitude,
popup = paste("Species", df$species, "<br>",
"Common Name:", df$common),
clusterOptions = markerClusterOptions())
m
})
}
shinyApp(ui = ui, server=server)
x <- filter(df2, species=="Selasphorus rufus" & year>=2010 & year<=2018)
y <- as.data.frame(table(x$year))
gbif_count <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count <- c(gbif_count, d)
print(gbif_count)
}
y <- cbind(y, gbif_count)
y <- mutate(y, normalized = Freq/gbif_count)
# group 2
a <- filter(df2, species=="Corvus caurinus" & year>=2010 & year<=2018)
b <- as.data.frame(table(a$year))
gbif_count2 <- c()
for(i in seq(from = 2010, to = 2018, by = 1)){
d <-  nrow(filter(df2, year==i))
gbif_count2 <- c(gbif_count2, d)
print(gbif_count2)
}
b <- cbind(b, gbif_count2)
b <- mutate(b, normalized = Freq/gbif_count2)
colnames(b) <- c("Var1", "Freq", "gbif_count", "normalized")
c <- rbind(y, b)
c$species <- c(rep("Selasphorus rufus", length(seq(from = 2010, to = 2018, by = 1))),
rep("Corvus caurinus", length(seq(from = 2010, to = 2018, by = 1))))
ggplot(c, aes(x = Var1, y = normalized, group = species))+
geom_line(aes(color=species))+
geom_point(aes(color = species))
View(head(df))
runApp()
runApp()
runApp()
runApp()
saveRDS(df2, "/Users/lesley/Desktop/datasets/gbif_complete.rds")
runApp()
runApp()
runApp()
runApp()
m <- c(1,2,3)
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
yearly_obs <- group_by(df2, year) %>% tally()
View(yearly_obs)
nrow(filter(df2, year==2018))
nrow(filter(df2, year==1995))
yearly_obs <- group_by(df2, year) %>% tally() %>% drop_na()
View(yearly_obs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(df2)
summary_df <- drop_na(year, species)
summary_df <- read.csv("/Users/lesley/Desktop/datasets/gbif_complete.csv",
sep = "\t",
stringsAsFactors = F,
na.strings = c("", " "))
summary_df <- drop_na(year, species)
summary_df <- read.csv("/Users/lesley/Desktop/DSSG2019/DSSG19BioDiv-master/biodiv_lesley/gbif_complete.csv",
sep = "\t",
stringsAsFactors = F,
na.strings = c("", " "))
summary_df <- summary_df %>% drop_na(year, species)
is.na(summary_df$year)
unique(is.na(summary_df$year))
unique(is.na(summary_df$species))
colnames(summary_df)
summary_df <- select(datasetKey, species, decimalLatitude, decimalLongitude, year)
summary_df <- summary_df %>% select(datasetKey, species, decimalLatitude, decimalLongitude, year)
colnames(summary_df)
View(head(summary_df))
write_csv(summary_df, "./gbif_summary_pre.csv")
runApp()
head(sort(unique(df2$species)))
runApp()
length(unique(df2$species)))
length(unique(df2$species))
x = df2 %>%
filter(species %in% input$species, year>=2010, year<=2018) %>%
group_by(species, year) %>%
tally() %>%
drop_na() %>%
add_zeros()
x = df2 %>%
filter(species=="Selasphorus rufus",year>=2010, year<=2018) %>%
group_by(species, year) %>%
tally() %>%
drop_na() %>%
add_zeros()
x$year
which(yearly_obs$year %in% x$year)
y <- yearly_obs[which(yearly_obs$year %in% x$year),]
y$year
head(x)
head(y)
class(x$n)
class(y$n)
x <- x %>% mutate(normalized = x$n/y$n)
head(x)
head(y)
runApp()
runApp()
install.packages("rgdal","rgeos", "sp" ,"GISTools")
install.packages(c("rgdal","rgeos", "sp" ,"GISTools"))
getwd()
ls
library(rgdal)
library(dplyr)
library(rgeos)
library(sp)
library(GISTools)
#setwd("C:/Users/Gabe/Desktop/DSSG19BioDiv")
#gdat = read.csv("GBif June27.csv") # This is the collapsed dataset (no years, only recency)
gdat = read.csv("gbif_summary_pre.csv") # This is the uncollapsed dataset (year information included)
if (colnames(gdat)[1] == "X") {gdat = gdat[,2:ncol(gdat)]}
gdatsp = gdat
bound = readOGR(dsn = "~/Downloads/AdminBoundaries", layer = "AdminBoundaries")
bound@data$SHAPE_STAr = round(bound@data$SHAPE_STAr) # This rounds the areas to the nearest metre squared to avoid problems with too many decimal places when writing the file
coordinates(gdatsp) = c("decimalLongitude", "decimalLatitude")
proj4string(gdatsp) = CRS("+proj=longlat +datum=WGS84")
gdatsp = spTransform(gdatsp, proj4string(bound))
# This code incorporates the UBC polygon
#ubc.coord = matrix(c(-123.26494, 49.26512, -123.26308, 49.25894, -123.25409, 49.25118, -123.22587, 49.23889, -123.19758, 49.23532,-123.1979, 49.24501, -123.2054, 49.24898,-123.20218, 49.25358,-123.20382, 49.25832,-123.21564, 49.25873,-123.21564, 49.26374,-123.22793, 49.26326,-123.22896, 49.26656,-123.22264, 49.26889,-123.2269, 49.27322,-123.22662, 49.27947,-123.24743, 49.2805,-123.26267, 49.27047,-123.26494, 49.26512), ncol = 2, byrow = TRUE)
#ubc.coord = matrix(c(-123.223952, 49.278195, -123.224796, 49.272730, -123.222808, 49.270882, -123.222808, 49.268641, -123.219675, 49.268759, -123.219495, 49.267265, -123.215277, 49.267382, -123.215398, 49.258417, -123.203288, 49.258140, -123.202864, 49.256686, -123.196597, 49.256646, -123.196718, 49.250197, -123.204491, 49.249214, -123.198949, 49.246303, -123.196780, 49.246224, -123.196898, 49.238515, -123.198525, 49.238475, -123.198586, 49.236626, -123.196899, 49.236587, -123.196899, 49.234935, -123.206900, 49.237532, -123.209431, 49.235565, -123.219976, 49.239577, -123.221662, 49.236902, -123.248681, 49.249010, -123.250528, 49.250441, -123.252837, 49.251495, -123.253761, 49.252851, -123.254570, 49.254809, -123.264734, 49.265203, -123.265081, 49.266710, -123.264273, 49.267162, -123.262659, 49.270779, -123.260463, 49.271831, -123.253076, 49.275524, -123.252037, 49.276804, -123.247420, 49.279517, -123.236335, 49.279442, -123.234257, 49.279518, -123.227567, 49.278763, -123.225500, 49.278093), ncol = 2, byrow = TRUE)
# Split up the UEL/EAA polygon(s)
line = SpatialLines(list(Lines(list(Line(cbind(c(479500,479500,484000),c(5456000,5458500,5458500)))),ID="line")), proj4string = CRS(proj4string(bound)))
line2 = SpatialLines(list(Lines(list(Line(cbind(c(481500,481500),c(5470000,5485000)))),ID="line")), proj4string = CRS(proj4string(bound)))
lpi1 = gIntersection(bound[26,],line)
blpi1 = gBuffer(lpi1, width=.0000001)
dpi1 = gDifference(bound[26,], blpi1)
runApp()
runApp()
no_year_info = function(x) {
lis = c()
for (sp in unique(x$species)) {
if (sum(!is.na(x$year[which(x$species == sp)]) == 0)) {lis = c(lis, sp)}
}
}
x = no_year_info(df)
no_year_info = function(x) {
lis = c()
for (sp in unique(x$species)) {
if (sum(!is.na(x$year[which(x$species == sp)]) == 0)) {lis = c(lis, sp)}
}
return(lis)
}
no_year_info(df)
#no_year_info = function(x) {
#  lis = c()
#  for (sp in unique(x$species)) {
#    if (sum(!is.na(x$year[which(x$species == sp)]) == 0)) {lis = c(lis, sp)}
#  }
#  return(lis)
#}
df = df[which(!is.na(df$year)),]
nrow(df)
df <- readRDS("./mun_years.rds")
df = df[1:1000,]
nrow(df)
colnames(df)
head(year)
head(df$year)
!is.na(df$year)
#no_year_info = function(x) {
#  lis = c()
#  for (sp in unique(x$species)) {
#    if (sum(!is.na(x$year[which(x$species == sp)]) == 0)) {lis = c(lis, sp)}
#  }
#  return(lis)
#}
df = df[!is.na(df$year),]
nrow(df)
shiny::runApp()
class(df$year)
runApp()
?scale_x_discrete
runApp()
runApp()
runApp()
df[which(df$species=="Abies lasiocarpa"),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rgdal)
sei <- readOGR(dsn = "/Users/raghav/Desktop/DSSG19BioDiv/mun_refined",
layer = "mun_refined")
library(rgdal)
sei <- readOGR(dsn = "/Users/raghav/Desktop/DSSG19BioDiv/mun_refined",
layer = "mun_refined")
library(rgdal)
sei <- readOGR(dsn = "/Users/raghav/Desktop/DSSG19BioDiv/mun_refined",
layer = "mun_refined")
getcwd()
getwd()
setwd("/Users/raghav/Desktop/DSSG19BioDiv/")
library(rgdal)
sei <- readOGR(dsn = "mun_refined",
layer = "mun_refined")
library(rgdal)
sei <- readOGR(dsn = "mun_refined",
layer = "boundary")
library(rgdal)
sei <- readOGR(dsn = "./boundary",
layer = "boundary")
library(rgdal)
sei <- readOGR(dsn = "boundary",
layer = "boundary")
getwd()
library(rgdal)
sei <- readOGR(dsn = "./boundary",
layer = "boundary")
readOGR(dsn = "./boundary",
layer = "boundary")
