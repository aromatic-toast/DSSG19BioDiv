head(organism_df_merge)
nrow(organism_df_merge)
organism_df_merge <- filter(df_merge, species =="Circus hudsonius")
nrow(organism_df_merge)
head(organism_df_merge)
#class_columns <- c()
organism_df <- filter(df_obs, species =="Circus hudsonius")
organism_df_merge <- filter(df_merge, species =="Circus hudsonius")
SE_class <- filter(trim_df_sei_polygons, SECl_1 == "RI")
# which of the polys where "organism" occurs, have fractional classes?
which(organism_df_merge$poly_index %in% SE_class$poly_index)
# which are the polys where "organism" occurs in class "RI"
ind <- which(organism_df_merge$poly_index %in% SE_class$poly_index)
# which of the polys where "organism" occurs in class "RI", have fractional classes?
organism_df_merge[ind,]
count_polys_in_class
length(ind)
nrow(organism_df_merge[ind,])
# which of the polys where "organism" occurs in class "RI", have fractional classes?
sum(organism_df_merge[ind,]$comp1_prop)
View(organism_df_merge[ind,])
# which of the polys where "organism" occurs in class "RI", have fractional classes?
num_organism_in_class <- sum(organism_df_merge[ind,]$comp1_prop)
#num_organism_in_class <- length(which(organism_df$poly_index %in% SE_class$SEI_PolyNb))
prop_in_class <- num_organism_in_class/count_polys_in_class
prop_in_class
52.7/count_polys_in_class
length(which(df_obs$poly_index %in% trim_df_sei_polygons$poly_index))
length(which(unique(df_obs$poly_index) %in% trim_df_sei_polygons$poly_index))
i <- which(unique(df_obs$poly_index) %in% trim_df_sei_polygons$poly_index)
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
df_obs[i,]$comp1_prop!=1
which(df_obs[i,]$comp1_prop!=1)
View(df_obs[which(df_obs[i,]$comp1_prop!=1),])
length(which(df_obs[i,]$comp1_prop!=1))
SEI_class_prop <- c()
for (i in unique(trim_df_sei_polygons$SECl_1)) {
se_class_proportions <- c()
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
# get number of polygons in single SEI class
count_polys_in_class <- nrow(SE_class)
for(k in unique(df_obs$species)){
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
# find the indices where organism occurs in given SEI class
ind <- which(df_obs$poly_index %in% SE_class$poly_index)
# sum the number of polys the organism occurs in for given SEI class
num_organism_in_class <- sum(df_obs[ind,]$comp1_prop)
# calculate proportion of organism sightings in the given SEI class polygons (including all polygons belonging to the SEI class)
prop_in_class <- num_organism_in_class/count_polys_in_class
se_class_proportions <- c(se_class_proportions, prop_in_class)
}
# combine the proportion calculations for each species for a class into a dataframe
SEI_class_prop <- cbind(SEI_class_prop, se_class_proportions)
}
# convert the proportion matrix into a dataframe
SEI_class_prop <- as.data.frame(SEI_class_prop)
# add SEI class abbreviations as column names
colnames(SEI_class_prop) <- unique(trim_df_sei_polygons$SECl_1)
# add the unique species column
SEI_class_prop <- cbind(species = unique(df_obs$species), SEI_class_prop)
View(head(SEI_class_prop))
View(head(SEI_class_prop), 50)
View(head(SEI_class_prop, 50))
View(tail(SEI_class_prop, 50))
length(which(SEI_class_prop$YS==SEI_class_prop$MF))
which(SEI_class_prop$YS==SEI_class_prop$MF)
which(SEI_class_prop$YS=SEI_class_prop$MF)
identical(SEI_class_prop$YS, SEI_class_prop$MF)
?identical
identical(SEI_class_prop$YS, SEI_class_prop$OD)
identical(SEI_class_prop$YS, SEI_class_prop$YF)
View(tail(head(SEI_class_prop, 1000), 50))
class(SEI_class_prop$YS)
organism_df <- filter(df_obs, species =="Accipiter cooperi")
SE_class <- filter(trim_df_sei_polygons, SECl_1 == "YS")
count_polys_in_class <- nrow(SE_class)
# which are the polys where "organism" occurs in class "RI"
ind <- which(organism_df$poly_index %in% SE_class$poly_index)
# sum the number of polygons organism occurs in, for given SEI class
num_organism_in_class <- sum(organism_df[ind,]$comp1_prop)
num_organism_in_class
#num_organism_in_class <- length(which(organism_df$poly_index %in% SE_class$SEI_PolyNb))
prop_in_class <- num_organism_in_class/count_polys_in_class
prop_in_class
nrow(organism_df)
head(organism_df)
View(organism_df[ind,])
m <- organism_df[ind,]
sum(m$comp1_prop)
num_organism_in_class
colnames(df_obs)
SEI_class_prop <- c()
for (i in unique(trim_df_sei_polygons$SECl_1)) {
se_class_proportions <- c()
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
# get number of polygons in single SEI class
count_polys_in_class <- nrow(SE_class)
for(k in unique(df_obs$species)){
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
# find the indices where organism occurs in given SEI class
ind <- which(organism_df$poly_index %in% SE_class$poly_index)
# sum the number of polys the organism occurs in for given SEI class
num_organism_in_class <- sum(organism_df[ind,]$comp1_prop)
# calculate proportion of organism sightings in the given SEI class polygons (including all polygons belonging to the SEI class)
prop_in_class <- num_organism_in_class/count_polys_in_class
se_class_proportions <- c(se_class_proportions, prop_in_class)
}
# combine the proportion calculations for each species for a class into a dataframe
SEI_class_prop <- cbind(SEI_class_prop, se_class_proportions)
}
# convert the proportion matrix into a dataframe
SEI_class_prop <- as.data.frame(SEI_class_prop)
# add SEI class abbreviations as column names
colnames(SEI_class_prop) <- unique(trim_df_sei_polygons$SECl_1)
# add the unique species column
SEI_class_prop <- cbind(species = unique(df_obs$species), SEI_class_prop)
View(head(SEI_class_prop))
0.00000000 == 0
View(tail(head(SEI_class_prop, 1000), 50)
View(tail(head(SEI_class_prop, 1000), 50))
?gather
head(df_obs)
x <- head(df_obs)
x
gather(x[,14:16], key = component, value = comp_prop)
ncol(df_obs)
gather(x[,15:17], key = component, value = comp_prop)
head(df_obs)
y <- cbind(x, gather(x[,15:17], key = component, value = comp_prop))
y
filter(y, species =="Aechmophorus occidentalis ")
filter(y, species =="Aechmophorus occidentalis")
df_obs <- cbind(df_obs, gather(df_obs[,15:17], key = "component", value = "comp_prop"))
View(head(df_obs))
organism_df <- filter(df_obs, species =="Accipiter cooperi")
SE_class <- filter(trim_df_sei_polygons, SECl_1 == "YS")
count_polys_in_class <- nrow(SE_class)
# which are the polys where "organism" occurs in class "RI"
ind <- which(organism_df$poly_index %in% SE_class$poly_index)
organism_df[ind,]
# sum the number of polygons organism occurs in, for given SEI class
num_organism_in_class <- sum(organism_df[ind,]$comp1_prop)
num_organism_in_class
nrow(SE_class)
View(head(SE_class))
View(head(SE_class), 50)
View(head(SE_class, 50))
ncol(trim_df_sei_polygons)
colnames(trim_df_sei_polygons)[14]
# gather the proportion information for comp1 -comp3 into the same column
trim_df_sei_polygons <- cbind(trim_df_sei_polygons, gather(trim_df_sei_polygons[,14:16], key = "component", value = "component_prop"))
View(head(trim_df_sei_polygons))
View(tail(head(trim_df_sei_polygons, 1000)))
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
View(head(df_obs))
View(head(trim_df_sei_polygons))
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
View(head(SE_class))
i
nrow(SE_class)
View(head(SE_class, 50))
View(tail(head(SE_class, 1000), 50))
View(tail(SE_class, 50))
View(head(SE_class, 70))
length(unique(SE_class$poly_index))
nrow(SE_class)
# get number of polygons in single SEI class
count_polys_in_class <- sum(SE_class$component_prop)
count_polys_in_class
k
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
# find the indices where organism occurs in given SEI class
ind <- which(organism_df$poly_index %in% SE_class$poly_index)
length(ind)
nrow(organism_df)
organism_df
ind
organism_df[ind,]
organism_df[ind,]$component_prop
# sum the number of polys the organism occurs in for given SEI class
num_organism_in_class <- sum(organism_df[ind,]$component_prop)
num_organism_in_class
length(SE_class$poly_index)
# read in SEI data
df_sei_polygons <- read.csv("sei_data_full.csv", stringsAsFactors = F)
# select the SEI columns that are relevant
trim_df_sei_polygons <- df_sei_polygons %>% select(7, 15:17,21:23, 27:29, 64:66)
# convert the polygon component deciles into proportions
trim_df_sei_polygons <- mutate(trim_df_sei_polygons,
comp1_prop = SEDec_1/10,
comp2_prop = SEDec_2/10,
comp3_prop = SEDec_3/10)
# rename the poly index column to have the same column name as df_obs index column
trim_df_sei_polygons <- rename(trim_df_sei_polygons, poly_index = SEI_PolyNb)
# gather the proportion information for comp1 -comp3 into the same column
trim_df_sei_polygons <- cbind(trim_df_sei_polygons, gather(trim_df_sei_polygons[,14:16], key = "component", value = "component_prop"))
View(head(trim_df_sei_polygons))
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
View(head(df_obs))
nrow(df_obs)
# read in SEI data
df_sei_polygons <- read.csv("sei_data_full.csv", stringsAsFactors = F)
# select the SEI columns that are relevant
trim_df_sei_polygons <- df_sei_polygons %>% select(7, 15:17,21:23, 27:29, 64:66)
# convert the polygon component deciles into proportions
trim_df_sei_polygons <- mutate(trim_df_sei_polygons,
comp1_prop = SEDec_1/10,
comp2_prop = SEDec_2/10,
comp3_prop = SEDec_3/10)
# rename the poly index column to have the same column name as df_obs index column
trim_df_sei_polygons <- rename(trim_df_sei_polygons, poly_index = SEI_PolyNb)
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
df_obs <- cbind(df_obs, gather(df_obs[,15:17], key = "component", value = "component_prop"))
# gather the proportion information for comp1 -comp3 into the same column
trim_df_sei_polygons <- cbind(trim_df_sei_polygons, gather(trim_df_sei_polygons[,14:16], key = "component", value = "component_prop"))
i
k
View(head(SE_class))
filter(SE_class, poly_index==103385)
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
nrow(SE_class)
count_polys_in_class
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
nrow(organism_df)
organism_df
# find the indices where organism occurs in given SEI class
ind <- which(organism_df$poly_index %in% SE_class$poly_index)
ind
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
organism_df
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
colnames(df_obs)
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
colnames(df_obs)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
colnames(df_obs)
# read in SEI data
df_sei_polygons <- read.csv("sei_data_full.csv", stringsAsFactors = F)
# select the SEI columns that are relevant
trim_df_sei_polygons <- df_sei_polygons %>% select(7, 15:17,21:23, 27:29, 64:66)
# convert the polygon component deciles into proportions
trim_df_sei_polygons <- mutate(trim_df_sei_polygons,
comp1_prop = SEDec_1/10,
comp2_prop = SEDec_2/10,
comp3_prop = SEDec_3/10)
# rename the poly index column to have the same column name as df_obs index column
trim_df_sei_polygons <- rename(trim_df_sei_polygons, poly_index = SEI_PolyNb)
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
colnames(df_obs)
colnames(trim_df_sei_polygons)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
colnames(df_obs)
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
colnames(organism_df)
organism_df
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
organism_df
length(unique(trim_df_sei_polygons$poly_index))
nrow(trim_df_sei_polygons)
nrow(unique(df_obs))
nrow(df_obs)
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# remove duplicate rows
df_obs <- unique(df_obs)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
nrow(unique(df_obs))
nrow(df_obs)
nrow(df_obs)
# remove duplicate rows
df_obs <- unique(df_obs)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
nrow(df_obs)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
ncol(df_obs)
colnames(df_obs)
nrow(df_obs)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
# read in SEI data
df_sei_polygons <- read.csv("sei_data_full.csv", stringsAsFactors = F)
# select the SEI columns that are relevant
trim_df_sei_polygons <- df_sei_polygons %>% select(7, 15:17,21:23, 27:29, 64:66)
# convert the polygon component deciles into proportions
trim_df_sei_polygons <- mutate(trim_df_sei_polygons,
comp1_prop = SEDec_1/10,
comp2_prop = SEDec_2/10,
comp3_prop = SEDec_3/10)
# rename the poly index column to have the same column name as df_obs index column
trim_df_sei_polygons <- rename(trim_df_sei_polygons, poly_index = SEI_PolyNb)
# gather the proportion information for comp1 -comp3 into the same column
trim_df_sei_polygons <- cbind(trim_df_sei_polygons, gather(trim_df_sei_polygons[,14:16], key = "component", value = "component_prop"))
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# remove duplicate rows
df_obs <- unique(df_obs)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
colnames(df_obs)
colnames(trim_df_sei_polygons)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
colnames(df_obs)
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
organism_df
nrow(df_obs)
# read in SEI data
df_sei_polygons <- read.csv("sei_data_full.csv", stringsAsFactors = F)
# select the SEI columns that are relevant
trim_df_sei_polygons <- df_sei_polygons %>% select(7, 15:17,21:23, 27:29, 64:66)
# convert the polygon component deciles into proportions
trim_df_sei_polygons <- mutate(trim_df_sei_polygons,
comp1_prop = SEDec_1/10,
comp2_prop = SEDec_2/10,
comp3_prop = SEDec_3/10)
# read in SEI data
df_sei_polygons <- read.csv("sei_data_full.csv", stringsAsFactors = F)
# select the SEI columns that are relevant
trim_df_sei_polygons <- df_sei_polygons %>% select(7, 15:17,21:23, 27:29, 64:66)
# convert the polygon component deciles into proportions
trim_df_sei_polygons <- mutate(trim_df_sei_polygons,
comp1_prop = SEDec_1/10,
comp2_prop = SEDec_2/10,
comp3_prop = SEDec_3/10)
# rename the poly index column to have the same column name as df_obs index column
trim_df_sei_polygons <- rename(trim_df_sei_polygons, poly_index = SEI_PolyNb)
# gather the proportion information for comp1 -comp3 into the same column
trim_df_sei_polygons <- cbind(trim_df_sei_polygons, gather(trim_df_sei_polygons[,14:16], key = "component", value = "component_prop"))
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# remove duplicate rows
df_obs <- unique(df_obs)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
nrow(df_obs)
nrow(unique(df_obs))
# remove duplicate rows
df_obs <- unique(df_obs)
nrow(df_obs)
colnames(df_obs)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
nrow(df_obs)
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
# get number of polygons in single SEI class
count_polys_in_class <- sum(SE_class$component_prop)
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
organism_df
nrow(df_obs)
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# remove duplicate rows
df_obs <- unique(df_obs)
nrow(df_obs)
# remove duplicate rows
df_obs <- unique(df_obs)
nrow(df_obs)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
nrow(df_obs)
nrow(unique(df_obs))
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
organism_df
# remove duplicate rows
df_obs <- unique(df_obs)
nrow(df_obs)
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
nrow(df_obs)
# remove duplicate rows
df_obs <- distinct(df_obs)
nrow(df_obs)
df_obs <- distinct(df_obs)
nrow(df_obs)
# read in species mapped to polygon index data
df_obs <- read.csv("gbif_map_poly.csv", stringsAsFactors = F)
# select the most relevant columns of df_obs
df_obs <- select(df_obs, 16, 18)
# remove duplicate rows
df_obs <- distinct(df_obs)
nrow(df_obs)
# merge the SEI data into the species observation data
df_obs <- merge(x = df_obs,
y = trim_df_sei_polygons,
by = "poly_index")
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
# get number of polygons in single SEI class
count_polys_in_class <- sum(SE_class$component_prop)
# filter data to single organism
organism_df <- filter(df_obs, species ==k)
organism_df
# find the indices where organism occurs in given SEI class
ind <- which(organism_df$poly_index %in% SE_class$poly_index)
ind
nrow(df_obs)
60000*3
View(head(SE_class))
length(unique(SE_class$poly_index))
nrow(SE_class)
nrow(unique(SE_class))
ncol(df_obs)
nrow(df_obs)
nrow(trim_df_sei_polygons)
length(unique(trim_df_sei_polygons$poly_index))
24759*3
nrow(unique(trim_df_sei_polygons))
SEI_class_prop <- c()
for (i in unique(trim_df_sei_polygons$SECl_1)) {
se_class_proportions <- c()
# filter data to single SEI class
SE_class <- filter(trim_df_sei_polygons, SECl_1 == i)
# get number of polygons in single SEI class
count_polys_in_class <- sum(SE_class$component_prop)
for(k in unique(df_obs$species)){
# filter data to a single organism
organism_df <- filter(df_obs, species ==k)
# find the indices where organism occurs in given SEI class
ind <- which(organism_df$poly_index %in% SE_class$poly_index)
# sum the number of polys the organism occurs in for given SEI class
num_organism_in_class <- sum(organism_df[ind,]$component_prop)
# calculate proportion of organism sightings in the given SEI class polygons (including all polygons belonging to the SEI class)
prop_in_class <- num_organism_in_class/count_polys_in_class
# create the proportion vector for given SEI class
se_class_proportions <- c(se_class_proportions, prop_in_class)
}
# combine the proportion calculations for each species for a class into a dataframe
SEI_class_prop <- cbind(SEI_class_prop, se_class_proportions)
}
# convert the proportion matrix into a dataframe
SEI_class_prop <- as.data.frame(SEI_class_prop)
# add SEI class abbreviations as column names
colnames(SEI_class_prop) <- unique(trim_df_sei_polygons$SECl_1)
# add the unique species column
SEI_class_prop <- cbind(species = unique(df_obs$species), SEI_class_prop)
View(head(SEI_class_prop, 50))
View(tail(head(SEI_class_prop, 1000), 50)
View(tail(head(SEI_class_prop, 1000), 50))
